mixin iForSymbolType(symbol)
    i(class=["alert", "alert-" + (symbol.type === "function" || symbol.type === "method" ? "info" : "success")])
mixin labelForSymbolType(symbol)
    div(class=["label", "label-" + (symbol.gtype === "function" || symbol.gtype === "method" ? "info" : "success"), "radius", "ctx-type"])= symbol.ctx.type
doctype html
html
    head
        meta(name='viewport', content='width=device-width', charset='utf-8')
        title= title
        link(rel="stylesheet", href="bootstrap/css/bootstrap.css")
        link(rel="stylesheet", href="bootstrap/css/bootstrap-responsive.css")
        link(rel="stylesheet", href="bootstrap/css/docs.css")
        link(rel="stylesheet", href="css/style.css")
    body(data-spy="scroll", data-target=".scrollspy")
        header#overview
            div.container
                h3= title
                p.lead
        .container
            .row
                .span3.bs-docs-sidebar
                    ul.nav.nav-list.bs-docs-sidenav.affix-top
                        each file in files
                            li(class=(file.name !== currentName ? "" : "active"))
                                a(href=file.relName) #{file.name}
                    .scrollspy
                        ul.nav.nav-list.bs-docs-sidenav.affix-top
                            each symbol in symbols
                                li
                                    if name === currentName
                                        a(href='#' + symbol.name)
                                            mixin iForSymbolType(symbol)
                                            span #{symbol.name}
                                    else
                                        a(href=symbol.targetFile + '#' + symbol.name)
                                            mixin iForSymbolType(symbol)
                                            span #{symbol.name}
                .span9
                    if locals.readme
                        section(id=name) !{readme}
                    each symbol in dox
                        if symbol.ctx.name
                            section(id=symbol.ctx.name)
                                h1= symbol.ctx.name
                                h5.subheader
                                if !symbol.gtype && symbol.type
                                    p
                                        div(class=["label", "label-inverse", "radius", "ctx-type"])= symbol.type
                                else
                                    p
                                        mixin labelForSymbolType(symbol)
                                        if symbol.ctx.string
                                            span= symbol.ctx.string
                                        if symbol.return
                                            |  ->
                                            span= symbol.return
                        if symbol.hasParams
                            table.table.table-bordered.table-striped
                                thead
                                    tr
                                        th(style="width:20%") Option name
                                        th(style="width:20%") Type
                                        th Description
                                tbody
                                    each tag in symbol.tags
                                        if tag.type == 'param'
                                            tr
                                                td= tag.name
                                                td= tag.types
                                                td!= tag.description
                                        if tag.type == 'return'
                                            tr
                                                td= tag.type
                                                td= tag.types
                                                td= tag.Description
                        .description !{symbol.description.full} !{symbol.description.extra}
                        if symbol.jsfiddle
                            h5 jsFiddle
                            p
                                iframe(width="100%", height="300", src=symbol.jsfiddle , allowfullscreen="allowfullscreen", frameborder="0")
        script(src="http://platform.twitter.com/widgets.js")
        script(src="http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js")
        script(src="http://leaverou.github.com/prefixfree/prefixfree.js")
        script(src="bootstrap/js/bootstrap-transition.js")
        script(src="bootstrap/js/bootstrap-scrollspy.js")
        script(src="bootstrap/js/bootstrap-dropdown.js")
        script(src="bootstrap/js/bootstrap-collapse.js")
        script(src="bootstrap/js/bootstrap-affix.js")
        // App js
        script.
            $(function () {
                var $window = $(window);
                $('.scrollspy .nav').affix({
                    offset: {
                        top: function () {
                            return $window.width() <= 980 ? 480 : 400
                        }
                        , bottom: 50
                    }
                });
            })